package com.jed.studentinfo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo")
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    @GetMapping("/addUser")
    public String addUser(Model model){
        User user = new User();
        model.addAttribute("user",user);
        return "addUser";
    }

    @PostMapping("/saveUser")
    public String saveUser(@ModelAttribute("user") User user){
        System.out.println("------------ In saveUser  " + user.toString());
        userRepository.save(user);
        return "redirect:/demo/index";

    }


    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/list")
    public String listStudents(Model model) {
        System.out.println("------------ In Main controller /List ");
        model.addAttribute("allUsers",  userRepository.findAll());
        return "all";
    }

    @GetMapping("/showFormForUpdate/{id}")
    public String showFormForUpdate(@PathVariable ( value = "id") long id, Model model) {

        // get employee from the service
        System.out.println("------------ In Main controller /showFormForUpdate/" + id );
        Optional<User> user = userRepository.findById(id);

        // set employee as a model attribute to pre-populate the form
        model.addAttribute("user", user);
        return "updateUser";
    }

    @GetMapping("/deleteUser/{id}")
    public String deleteUser(@PathVariable (value = "id") long id) {

        // call delete employee method
        this.userRepository.deleteById(id);
        return "redirect:/demo/index";
    }

    @GetMapping("/index")
    public  String homePage(Model model){
        return findPaginated(1, model, "name","asc");
    }
    @GetMapping("/page/{pageNo}")
    public String findPaginated(@PathVariable(value = "pageNo") int pageNo, Model model, @RequestParam("sortField") String sortField, @RequestParam("sortDir") String sortDir) {
        int pageSize = 3;
        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortField).ascending() :
                Sort.by(sortField).descending();

        Pageable pageable = PageRequest.of(pageNo - 1, pageSize,sort);
        Page<User> page = userRepository.findAll(pageable);
        List<User> listUsers = page.getContent();
        System.out.println("In /Page/PageNo controller <findPaginated>");
        model.addAttribute("currentPage", pageNo);
        model.addAttribute("totalPages", page.getTotalPages());
        model.addAttribute("totalItems", page.getTotalElements());

        model.addAttribute("sortField", sortField);
        model.addAttribute("sortDir", sortDir);
        model.addAttribute("reverseSortDir", sortDir.equals("asc") ? "desc" : "asc");

        model.addAttribute("allUsers",  listUsers);
        return "index";
    }

    // Custom Queries are used by almost everyone.
    // If could be to create a target list of machines
    // for a scheduled task, to create a report,
    // or for some other reason Either way Custom
    // Queries are very useful. Creating them
    // incorrectly or inefficiently can cause all
    // sorts of problems.

}